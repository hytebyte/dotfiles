if v:progname =~? "evim"
  finish
endif

call plug#begin('~/.vim/plugged')

" Install vim-plug itself (allows :help vim-plug)
Plug 'junegunn/vim-plug'

" Sensible default settings
Plug 'tpope/vim-sensible'

" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-vinegar'
Plug 'icymind/NeoSolarized'
Plug 'w0ng/vim-hybrid'
"Plug 'edkolev/tmuxline.vim'
Plug 'vim-syntastic/syntastic'
Plug 'christoomey/vim-tmux-navigator'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-unimpaired'
Plug 'ctrlpvim/ctrlp.vim'

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
endif

" General edit tools
Plug 'tpope/vim-surround'
Plug 'vim-scripts/matchit.zip'

" Tools integration
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'shumphrey/fugitive-gitlab.vim'

if executable('task')
  Plug 'farseer90718/vim-taskwarrior'
endif

" Snippets
Plug 'mattn/emmet-vim'
"Plug 'SirVer/ultisnips'

" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'digitaltoad/vim-jade'
Plug 'nikvdp/ejs-syntax'
Plug 'kchmck/vim-coffee-script'
Plug 'leafgarland/typescript-vim'

" Go
if
  \ v:version > 704 || (v:version == 704 && has('patch1689'))
  \ || has('nvim')
  Plug 'fatih/vim-go'
endif

" Other filetypes
Plug 'cespare/vim-toml'
Plug 'chr4/nginx.vim'
Plug 'ekalinin/Dockerfile.vim'
Plug 'rust-lang/rust.vim'
Plug 'Matt-Deacalion/vim-systemd-syntax'
Plug 'martinda/Jenkinsfile-vim-syntax'
Plug 'glench/vim-jinja2-syntax'
Plug 'nfnty/vim-nftables'

call plug#end()

let mapleader = ","

set nobackup                    " Don't create annoying backup files
set history=50                  " Keep 50 lines of command line history
set sw=2
set ts=2
set scrolloff=2                 " Always keep at least 2 lines visible around the cursor
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not if it begins with upper case
set number                      " Show line numbers
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed
set expandtab
set foldmethod=marker
set noshowmode                  " We show the mode with airline or lightline
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
set completeopt=menu,menuone,noselect    " Show popup menu, even if there is one entry
set pumheight=10                " Completion window max size
set lazyredraw                  " Wait to redraw

" Enable to copy to clipboard for operations like yank, delete, change and put
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
endif

if has('nvim')
  set inccommand=nosplit
endif

if exists('+cryptmethod')
  " When encrypting any file, use the much stronger blowfish algorithm
  set cryptmethod=blowfish
  " Don't store data in additional files when using encryption
  autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo=
        \ nobackup noshelltemp history=0 secure | endif
endif

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
  " Use special characters in statusbar
  let g:airline_powerline_fonts = 1
  if !has("gui_running") && &term =~ 'linux'
    colorscheme elflord
  else
    set background=dark
    set termguicolors
    if !has("nvim") " needed for truecolor in vim
      let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
      let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
    endif
    try
      colorscheme hybrid
    catch /^Vim\%((\a\+)\)\=:E185/
    endtry
  endif
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
au!

" Set filetype specific options
autocmd FileType text     setlocal textwidth=78
autocmd FileType make     setlocal noexpandtab ts=8 sw=8
autocmd FileType nginx    setlocal expandtab ts=4 sw=4
autocmd FileType c        setlocal noexpandtab ts=4 sw=4
autocmd FileType cpp      setlocal noexpandtab ts=4 sw=4
autocmd FileType php      setlocal expandtab ts=4 sw=4
autocmd FileType gitolite setlocal expandtab ts=4 sw=4

augroup END

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                  \ | wincmd p | diffthis
endif

" Use space to open/close folds in normal mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" Maintain a visual selection while indenting
vnoremap < <gv
vnoremap > >gv

" Disable F1 help because its dumb
nmap <F1> :echo<CR>
imap <F1> <C-o>:echo<CR>

" F3 retabs the buffer and removes any trailing whitespace
nnoremap <silent> <F3> :retab<CR>:call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s = @/
  let l = line(".")
  let c = col(".")

  %s/\s\+$//e
  " Clean up: restore previous search history and cursor position.
  let @/ = _s
  call cursor(l, c)
endfunction

" Fix ctrl-h in neovim
if has('nvim')
  nnoremap <silent> <BS> :TmuxNavigateLeft<cr>
endif

" F4 toggles paste mode
nnoremap <F4> :set invpaste paste?<Enter>
imap <F4> <C-O><F4>
set pastetoggle=<F4>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" enable airline buffers display
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline_skip_empty_sections = 1

" vim-go settings
let g:go_doc_url = 'http://localhost:6060'
let g:go_fmt_command = "goimports"
let g:go_fmt_options = {
      \ 'gofmt': '-s',
      \ }
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_diagnostic_errors = 0
let g:go_highlight_diagnostic_warnings = 0
let g:go_list_type = "quickfix"
let g:go_fold_enable = ['import', 'package_comment']
let g:go_metalinter_command = "golangci-lint"
let g:go_metalinter_enabled = ['typecheck', 'govet', 'deadcode', 'errcheck', 'gosimple', 'ineffassign']
let g:go_metalinter_autosave = 0
let g:go_metalinter_autosave_enabled = ['typecheck', 'govet', 'deadcode', 'errcheck', 'gosimple', 'ineffassign']
let g:go_template_file = $HOME . "/.config/dotfiles/vim/empty.go"
let g:go_echo_go_info = 0

augroup go
  autocmd!
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=2 shiftwidth=2 foldmethod=syntax
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <Leader>i <Plug>(go-info)
  autocmd FileType go nmap <Leader>l <Plug>(go-metalinter)
  autocmd FileType go nmap <Leader>a <Plug>(go-alternate-edit)
  autocmd FileType go nmap <leader>d <Plug>(go-doc-browser)
  autocmd FileType go nmap <leader>si :GoSameIdsToggle<CR>
augroup END

" syntastic settings
let g:syntastic_aggregate_errors = 1
let g:syntastic_mode_map = { 'mode': 'active' }
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" TaskWarrior settings
let g:task_rc_override = 'rc.defaultwidth=0'
nnoremap <leader>t :TW<cr>

" fugitive settings
nnoremap <leader>b :Gbrowse<cr>
vnoremap <leader>b :Gbrowse<cr>
let g:fugitive_gitlab_domains = ['https://gitlab.demon.fm']

" deoplete settings
let g:deoplete#enable_at_startup = 1
try
  call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
catch
endtry

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Up>"

" Toggle quickfix window
nnoremap <leader>q :call <SID>QuickFix_toggle()<cr>
function! <SID>QuickFix_toggle()
  for i in range(1, winnr('$'))
    if getbufvar(winbufnr(i), '&buftype') == 'quickfix'
      cclose
      return
    endif
  endfor
  copen
endfunction
