if v:progname =~? "evim"
  finish
endif

let mapleader = ","

" Plugins {{{1

" Install vim-plug if not installed already.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

" Install vim-plug itself (allows :help vim-plug).
Plug 'https://github.com/junegunn/vim-plug'

" Sensible default settings.
Plug 'https://github.com/tpope/vim-sensible'

" UI.
Plug 'https://github.com/chrisbra/csv.vim'
Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/vim-airline/vim-airline-themes'
Plug 'https://gitlab.com/hytebyte/vim-airline-theme-snow'
Plug 'https://github.com/tpope/vim-vinegar'
Plug 'https://github.com/icymind/NeoSolarized'
Plug 'https://github.com/w0ng/vim-hybrid'
Plug 'https://github.com/nightsense/snow'
"Plug 'https://github.com/edkolev/tmuxline.vim'
Plug 'https://github.com/vim-syntastic/syntastic'
Plug 'https://github.com/christoomey/vim-tmux-navigator'
Plug 'https://github.com/machakann/vim-highlightedyank'
Plug 'https://github.com/tpope/vim-unimpaired'
Plug 'https://github.com/ctrlpvim/ctrlp.vim'
"Plug 'https://github.com/Shougo/deoplete.nvim', has('nvim') ? { 'do': ':UpdateRemotePlugins' } : {},
"Plug 'https://github.com/roxma/nvim-yarp', Cond(!has('nvim'))
"Plug 'https://github.com/roxma/vim-hug-neovim-rpc', Cond(!has('nvim'))
Plug 'https://github.com/neoclide/coc.nvim', {'branch': 'release'}
Plug 'https://github.com/konfekt/foldtext'

" General edit tools
Plug 'https://github.com/tpope/vim-surround'
Plug 'https://github.com/vim-scripts/matchit.zip'

" Tools integration
Plug 'https://github.com/tpope/vim-fugitive'
Plug 'https://github.com/tpope/vim-rhubarb'
Plug 'https://github.com/shumphrey/fugitive-gitlab.vim'

" Snippets
Plug 'https://github.com/mattn/emmet-vim'
"Plug 'https://github.com/SirVer/ultisnips'

" JavaScript
Plug 'https://github.com/pangloss/vim-javascript'
Plug 'https://github.com/digitaltoad/vim-jade'
Plug 'https://github.com/nikvdp/ejs-syntax'
Plug 'https://github.com/kchmck/vim-coffee-script'
Plug 'https://github.com/leafgarland/typescript-vim'

" Go
function! SupportsVimGo()
  return v:version > 800 || (v:version == 800 && has('patch1453'))
endfunction
Plug 'https://github.com/fatih/vim-go', Cond(SupportsVimGo())

" Python
Plug 'https://github.com/tmhedberg/SimpylFold'

" Other filetypes
Plug 'https://github.com/cespare/vim-toml'
Plug 'https://github.com/chr4/nginx.vim'
Plug 'https://github.com/ekalinin/Dockerfile.vim'
Plug 'https://github.com/rust-lang/rust.vim'
Plug 'https://github.com/Matt-Deacalion/vim-systemd-syntax'
Plug 'https://github.com/martinda/Jenkinsfile-vim-syntax'
Plug 'https://github.com/glench/vim-jinja2-syntax'
Plug 'https://github.com/nfnty/vim-nftables'

call plug#end()

" Editor settings {{{1

set nobackup                    " Don't create annoying backup files.
set history=50                  " Keep 50 lines of command line history.
set sw=2
set ts=2
set scrolloff=2                 " Always keep at least 2 lines visible around the cursor.
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not if it begins with upper case.
set number                      " Show line numbers.
set relativenumber              " Use line numbers relative to the current line.
set autowrite                   " Automatically save before :next, :make etc.
set hidden                      " Buffer should still exist if window is closed.
set expandtab
set noshowmode                  " We show the mode with airline or lightline.
set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats.
set completeopt=menu,menuone,noselect " Show popup menu, even if there is one entry.
set pumheight=10                " Completion window max size.
set lazyredraw                  " Wait to redraw.
set hlsearch                    " Highlight search matches.
set termguicolors               " Enable 24bit color support.
set signcolumn=yes              " Always show the sign column.

" Enable to copy to clipboard for operations like yank, delete, change and
" put.
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

" This enables us to undo files even if you exit Vim.
if has('persistent_undo')
  set undofile
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

if has('nvim')
  set inccommand=nosplit
else
  " Used for truecolor in vim.
  let &t_8f = "\<Esc>[38:2:%lu:%lu:%lum"
  let &t_8b = "\<Esc>[48:2:%lu:%lu:%lum"
endif

if has("folding")
  set foldmethod=marker
endif

" Switch syntax highlighting on.
syntax on

" Settings for airline {{{1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_nr_show = 1

let g:airline_skip_empty_sections = 1
let g:airline_powerline_fonts = 1 " Use powerline characters

" Settings for vim-go {{{1

let g:go_doc_keywordprg_enabled = 0
let g:go_doc_url = 'http://localhost:6060'
let g:go_doc_balloon = 1
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_diagnostic_errors = 0
let g:go_highlight_diagnostic_warnings = 0
let g:go_list_type = "quickfix"
let g:go_fold_enable = ['import', 'package_comment']
let g:go_metalinter_command = "golangci-lint"
let g:go_metalinter_enabled = ['typecheck', 'govet', 'deadcode', 'errcheck', 'gosimple', 'ineffassign']
let g:go_metalinter_autosave = 0
let g:go_metalinter_autosave_enabled = ['typecheck', 'govet', 'deadcode', 'errcheck', 'gosimple', 'ineffassign']
let g:go_template_file = $HOME . "/.config/dotfiles/vim/empty.go"
let g:go_test_show_name = 1
let g:go_echo_go_info = 0
let g:go_gopls_gofumpt = 1

augroup go
  autocmd!
  autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=2 shiftwidth=2 foldmethod=syntax
  autocmd FileType go nmap <leader>r <Plug>(go-run)
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>c <Plug>(go-coverage-toggle)
  autocmd FileType go nmap <leader>i <Plug>(go-info)
  autocmd FileType go nmap <leader>l <Plug>(go-metalinter)
  autocmd FileType go nmap <leader>a <Plug>(go-alternate-edit)
  autocmd FileType go nmap <leader>d <Plug>(go-doc-browser)
  autocmd FileType go nmap <leader>si :GoSameIdsToggle<CR>
augroup END

" Settings for syntastic {{{1

let g:syntastic_aggregate_errors = 1
let g:syntastic_mode_map = { 'mode': 'active' }
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Settings for fugitive {{{1

nnoremap <leader>b :Gbrowse<cr>
vnoremap <leader>b :Gbrowse<cr>
let g:fugitive_gitlab_domains = ['https://gitlab.demon.fm']

" Settings for deoplete {{{1

let g:deoplete#enable_at_startup = 1
try
  call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })
catch
endtry

inoremap <expr> <C-j> pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <C-k> pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <silent><expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Settings for asm {{{1

let g:asmsyntax = 'nasm'

" Settings for rust {{{1

let g:rustfmt_autosave = 1
let g:rust_fold = 1 " All folds open by default.

augroup rust
  autocmd FileType rust nmap <leader>r :Crun<CR>
  autocmd FileType rust nmap <leader>t :Ctest<CR>
  autocmd FileType rust nmap <M-j> :CocCommand rust-analyzer.moveItemDown<CR>
  autocmd FileType rust nmap <M-k> :CocCommand rust-analyzer.moveItemUp<CR>
  autocmd FileType rust nmap <leader>d :CocCommand rust-analyzer.openDocs<CR>
augroup END

" Key mappings {{{1

" Don't use Ex mode, use Q for formatting
noremap Q gq

" CTRL-U in insert mode deletes a lot. Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Use space to open/close folds in normal mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" Maintain a visual selection while indenting
vnoremap < <gv
vnoremap > >gv

" Disable F1 help
nnoremap <F1> :echo<CR>
inoremap <F1> <C-o>:echo<CR>

" F2 toggles background (dark/light)
nnoremap <silent> <F2> :let &background = (&background == 'light' ? 'dark' : 'light')<CR>
inoremap <silent> <F2> <C-o>:let &background = (&background == 'light' ? 'dark' : 'light')<CR>

" F3 retabs the buffer and removes any trailing whitespace
nnoremap <silent> <F3> :retab<CR>:call <SID>StripTrailingWhitespaces()<CR>
function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s = @/
  let l = line(".")
  let c = col(".")

  %s/\s\+$//e
  " Clean up: restore previous search history and cursor position.
  let @/ = _s
  call cursor(l, c)
endfunction

" F4 toggles paste mode
nnoremap <silent> <F4> :set paste!<cr>
inoremap <silent> <F4> <C-O>:set paste!<cr>
set pastetoggle=<F4>

nnoremap <leader>ev :edit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Toggle quickfix window
nnoremap <silent> <leader>q :call <SID>QuickFixToggle()<cr>
function! s:QuickFixToggle()
  for i in range(1, winnr('$'))
    if getbufvar(winbufnr(i), '&buftype') == 'quickfix'
      cclose
      return
    endif
  endfor
  copen
endfunction

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>ShowDocumentation()<CR>

function! s:ShowDocumentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

let g:coc_snippet_next = '<tab>'

" Commands {{{1

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
                  \ | wincmd p | diffthis
endif

" Colorscheme {{{1

function! ColorScheme_NeoSolarized() abort " {{{2
  let s:gui_hint_sign = "#30525c"
  let s:gui_code_lens = s:gui_hint_sign
  let s:term_hint_sign = "10"
  let s:term_code_lens = s:term_hint_sign

  if &background == "light"
    let s:gui_hint_sign = "#c1c5bb"
    let s:gui_code_lens = s:gui_hint_sign
    let s:term_hint_sign = "14"
    let s:term_code_lens = s:term_hint_sign
  endif

  exe "highlight CocHintSign ctermfg=".s:term_hint_sign." guifg=".s:gui_hint_sign
  exe "highlight CocCodeLens ctermfg=".s:term_code_lens." guifg=".s:gui_code_lens
endfunction

function! ColorScheme_hybrid() abort " {{{2
  let s:gui_hint_sign = "#373b41"
  let s:gui_code_lens = s:gui_hint_sign

  if &background == "light"
    let s:gui_hint_sign = "#bcbcbc"
    let s:gui_code_lens = s:gui_hint_sign
  endif

  exe "highlight CocHintSign guifg=".s:gui_hint_sign
  exe "highlight CocCodeLens guifg=".s:gui_code_lens
endfunction

function! ColorScheme_snow() abort " {{{2
  let s:gui_hint_sign = "#535c65"
  let s:gui_code_lens = s:gui_hint_sign
  let s:term_hint_sign = "240"
  let s:term_code_lens = s:term_hint_sign

  if &background == "light"
    let s:gui_hint_sign = "#cbd2d9"
    let s:gui_code_lens = s:gui_hint_sign
    let s:term_hint_sign = "252"
    let s:term_code_lens = s:term_hint_sign
  endif

  exe "highlight CocHintSign ctermfg=".s:term_hint_sign." guifg=".s:gui_hint_sign
  exe "highlight CocCodeLens ctermfg=".s:term_code_lens." guifg=".s:gui_code_lens
endfunction

" }}}2

augroup highlights
  autocmd!
  autocmd ColorScheme NeoSolarized  call ColorScheme_NeoSolarized()
  autocmd ColorScheme hybrid        call ColorScheme_hybrid()
  autocmd ColorScheme snow          call ColorScheme_snow()
augroup END

if strftime('%H') >= 7 && strftime('%H') < 19
  set background=light
else
  set background=dark
endif

if !exists('g:airline_theme_map')
  let g:airline_theme_map = {}
endif
call extend(g:airline_theme_map, {
      \ 'snow': 'snow',
      \ }, 'keep')

colorscheme snow

" Filetypes {{{1

augroup filetypes
  autocmd!
  autocmd FileType text     setlocal textwidth=78
  autocmd FileType make     setlocal ts=8 sw=8 noexpandtab
  autocmd FileType nginx    setlocal ts=4 sw=4 expandtab
  autocmd FileType c        setlocal ts=4 sw=4 noexpandtab
  autocmd FileType cpp      setlocal ts=4 sw=4 noexpandtab
  autocmd FileType php      setlocal ts=4 sw=4 expandtab
  autocmd FileType gitolite setlocal ts=4 sw=4 expandtab
  autocmd FileType haskell  setlocal ts=4 sw=4 expandtab
  autocmd FileType java     setlocal ts=4 sw=4 expandtab
  autocmd FileType nasm     setlocal ts=8 sw=8 noexpandtab
  autocmd FileType rust     setlocal ts=4 sw=4 expandtab foldmethod=syntax
augroup END

" }}}1
